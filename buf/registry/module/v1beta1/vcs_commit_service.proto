// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/resource.proto";
import "buf/registry/module/v1beta1/vcs_commit.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Operate on VCSCommits.
service VCSCommitService {
  // Get VCSCommits by id or name.
  rpc GetVCSCommits(GetVCSCommitsRequest) returns (GetVCSCommitsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List VCSCommits for a given Commit, Module, Tag, or Branch.
  rpc ListVCSCommits(ListVCSCommitsRequest) returns (ListVCSCommitsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetVCSCommitsRequest {
  // The VCSCommits to request.
  repeated VCSCommitRef vcs_commit_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetVCSCommitsResponse {
  // The retrieved VCSCommits in the same order as requested.
  repeated VCSCommit vcs_commits = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListVCSCommitsRequest {
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned,
  string page_token = 2;

  // The reference to list VCSCommits for.
  //
  // See the documentation on Ref for resource resolution details.
  //
  // Once the resource is resolved, the following VCSCommits are listed:
  //   - If a Module is referenced, all VCSCommits for the Module are returned.
  //   - If a Commit is referenced, all VCSCommits for the Commit are returned.
  //   - If a Tag is referenced, all VCSCommits for the Commit associated with the Tag are returned.
  //   - If a VCSCommit is referenced, this VCSCommit is returned.
  //   - Is a Branch is referenced, all VCSCommits associated with Commits on the Branch are returned.
  //   - If a Digest is referenced, all VCSCommits associated with Commits with this Digest are returned.
  ResourceRef resource_ref = 3 [(buf.validate.field).required = true];
}

message ListVCSCommitsResponse {
  // The next page token.
  //
  /// If empty, there are no more pages.
  string next_page_token = 1;
  // The listed VCSCommits.
  repeated VCSCommit vcs_commits = 2;
}
