// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// A label on a specific Module.
//
// Many Labels can be associated with one Commit.
message Label {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The id of the Label.
  string id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // The time the Label was created on the BSR.
  google.protobuf.Timestamp create_time = 2 [(buf.validate.field).required = true];
  // The last time the Label was updated on the BSR.
  google.protobuf.Timestamp update_time = 3 [(buf.validate.field).required = true];
  // Whether or not the Label was archived.
  //
  // If a Label is archived, the API considers it to not exist and will not return archived
  // Labels, except when calling LabelService.GetLabels.
  bool archived = 4;
  // The name of the Label.
  //
  // Unique within a given Module.
  string name = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 250
  ];
  // The id of the User or Organization that owns the Module that the Label is associated with.
  string owner_id = 6 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // The id of the Module that the Label is associated with.
  string module_id = 7 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // The id of the Commit currently associated with the Label.
  //
  // If governance workflow is enabled, this will point to the most recent Commit that passed or accepted Commit.
  // To get the history of the Commits that have been associated with a Label, use ListLabelHistory.
  string commit_id = 8 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // The id of the User that last updated this Label on the BSR.
  string updated_by_user_id = 9 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // Whether or not governance workflow is enabled for this Label.
  //
  // Governance workflow is an enterprise-only feature - contact us to learn more!
  bool governance_workflow_enabled = 10;
  // The governance workflow state of the Commit the Label points to.
  //
  // This field will only be set if governance workflow was enabled on this Label when this Commit was pushed.
  GovernanceWorkflowState governance_workflow_state = 11 [(buf.validate.field).enum.defined_only = true];
}

// The state of a Commit in the governance workflow for a particular Label.
//
// Governance workflow is an enterprise-only feature - contact us to learn more!
enum GovernanceWorkflowState {
  GOVERNANCE_WORKFLOW_STATE_UNSPECIFIED = 0;
  // The Commit did not fail any governance checks and therefore did not need review.
  GOVERNANCE_WORKFLOW_STATE_PASSED = 1;
  // The Commit was reviewed after failing governance checks and was accepted.
  GOVERNANCE_WORKFLOW_STATE_ACCEPTED = 2;
  // The Commit was reviewed after failing governance checks and was rejected.
  GOVERNANCE_WORKFLOW_STATE_REJECTED = 3;
  // The Commit has not yet been reviewed after failing governance checks and is pending.
  GOVERNANCE_WORKFLOW_STATE_PENDING = 4;
  // TODO: decide how we want to handle the case where a commit is blocked on another commit that is either pending
  // or rejected
}

// LabelRef is a reference to a Label, either an id or a fully-qualified name.
//
// This is used in requests.
message LabelRef {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // The fully-qualified name of a Label within a BSR instance.
  //
  // A Name uniquely identifies a Label.
  // This is used for requests when a caller only has the label name and not the ID.
  message Name {
    // The name of the owner of the Module that contains the Label, either a User or Organization.
    string owner = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.max_len = 32
    ];
    // The name of the Module that contains the Label, either a User or Organization.
    string module = 2 [(buf.validate.field).string = {
      min_len: 2,
      max_len: 100
    }];
    // The Label name.
    string label = 3 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.max_len = 250
    ];
  }

  oneof value {
    option (buf.validate.oneof).required = true;
    // The id of the Label.
    string id = 1 [(buf.validate.field).string.uuid = true];
    // The fully-qualified name of the Label.
    Name name = 2;
  }
}

// A reference to a Label scoped to a Module, either an id or a name.
//
// This is used in requests.
message ScopedLabelRef {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  oneof value {
    option (buf.validate.oneof).required = true;
    // The id of the Label.
    string id = 1 [(buf.validate.field).string.uuid = true];
    // The name of the Label.
    string name = 2;
  }
}
