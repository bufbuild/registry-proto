// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/commit.proto";
import "buf/registry/module/v1beta1/digest.proto";
import "buf/registry/module/v1beta1/resource.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Operate on Commits.
service CommitService {
  // Get Commits by id.
  rpc GetCommits(GetCommitsRequest) returns (GetCommitsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Commits by Module or Digest.
  rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetCommitsRequest {
  // The Commits to request.
  repeated CommitRef commit_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
  // The DigestType to use for Digests returned on Commits.
  //
  // If this DigestType is not available, an error is returned.
  // Note that certain DigestTypes may be deprecated over time.
  //
  // If not set, the latest DigestType is used, currently B5.
  DigestType digest_type = 2;
}

message GetCommitsResponse {
  // The retrieved Commits in the same order as requested.
  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListCommitsRequest {
  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by create_time oldest to newest.
    ORDER_CREATE_TIME_ASC = 1;
    // Order by create_time newest to oldest.
    ORDER_CREATE_TIME_DESC = 2;
  }
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned,
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The reference to list Commits for.
  //
  // See the documentation on Ref for resource resolution details.
  //
  // Once the resource is resolved, the following Commits are listed:
  //   - If a Module is referenced, all Commits for the Module are returned.
  //   - If a Label is referenced, the Commit associated with this Label is returned.
  //   - If a Commit is referenced, this Commit is returned.
  //   - If a Digest is referenced, all Commits with this Digest are returned.
  ResourceRef resource_ref = 3 [(buf.validate.field).required = true];
  // The order to return the Commits.
  //
  // If not specified, defaults to ORDER_CREATE_TIME_ASC.
  //
  // TODO: Do we want ORDER_CREATE_TIME_ASC to be the default?
  // TODO: We are purposefully not making the default the zero enum value, however
  // we may want to consider this.
  Order order = 4;
  // The DigestType to use for Digests returned on Commits.
  //
  // If this DigestType is not available, an error is returned.
  // Note that certain DigestTypes may be deprecated over time.
  //
  // If not set, the latest DigestType is used, currently B5.
  DigestType digest_type = 5;
}

message ListCommitsResponse {
  // The next page token.
  //
  // If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The listed Commits.
  repeated Commit commits = 2;
}
