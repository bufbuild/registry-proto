// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/commit.proto";
import "buf/registry/module/v1beta1/digest.proto";
import "buf/registry/module/v1beta1/label.proto";
import "buf/registry/module/v1beta1/resource.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Operate on Labels.
service LabelService {
  // Get Labels by id or name.
  rpc GetLabels(GetLabelsRequest) returns (GetLabelsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Labels for a given Module, Commit, or CommitDigest.
  rpc ListLabels(ListLabelsRequest) returns (ListLabelsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List the history of a Label.
  rpc ListLabelHistory(ListLabelHistoryRequest) returns (ListLabelHistoryResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Create Labels on a Module.
  //
  // This operation is atomic. Either all Labels are created or an error is returned.
  // It will return an error if a Label already exists.
  rpc CreateLabels(CreateLabelsRequest) returns (CreateLabelsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Archive existing Labels.
  //
  // This operation is atomic. Either all Labels are archived or an error is returned.
  rpc ArchiveLabels(ArchiveLabelsRequest) returns (ArchiveLabelsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message GetLabelsRequest {
  // The Labels to request.
  //
  // This may reference archived Labels.
  repeated LabelRef label_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetLabelsResponse {
  // The retrieved Labels in the same order as requested.
  repeated Label labels = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListLabelsRequest {
  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by create_time oldest to newest.
    ORDER_CREATE_TIME_ASC = 1;
    // Order by create_time newest to oldest.
    ORDER_CREATE_TIME_DESC = 2;
  }
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned,
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The reference to list Labels for.
  //
  // See the documentation on Ref for resource resolution details.
  //
  // Once the resource is resolved, the following Labels are listed:
  //   - If a Module is referenced, all Labels for the Module are returned.
  //   - If a Label is referenced, this Label is returned.
  //   - If a Commit is referenced, all Labels for the Commit are returned.
  ResourceRef resource_ref = 3 [(buf.validate.field).required = true];
  // The order to return the Labels.
  //
  // If not specified, defaults to ORDER_CREATE_TIME_ASC.
  //
  // TODO: Do we want ORDER_CREATE_TIME_ASC to be the default?
  // TODO: We are purposefully not making the default the zero enum value, however
  // we may want to consider this.
  Order order = 4 [(buf.validate.field).enum.defined_only = true];
}

message ListLabelsResponse {
  // The next page token.
  //
  /// If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The listed Labels.
  repeated Label labels = 2;
}

message ListLabelHistoryRequest {
  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by association time newest to oldest.
    //
    // The Commits most recently associated with the Label will be listed first.
    ORDER_DESC = 1;
    // Order by association time oldest to newest.
    ORDER_ASC = 2;
  }
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned.
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The Label to list history for.
  //
  // This may reference archived Labels.
  LabelRef label_ref = 3 [(buf.validate.field).required = true];
  // The order to list the Labels.
  //
  // If not specified, defaults to ORDER_DESC.
  //
  // TODO: We are purposefully not making the default the zero enum value, however
  // we may want to consider this.
  Order order = 4 [(buf.validate.field).enum.defined_only = true];
  // The DigestType to use for Digests returned on Commits.
  //
  // If this DigestType is not available, an error is returned.
  // Note that certain DigestTypes may be deprecated over time.
  //
  // If not set, the latest DigestType is used, currently B5.
  DigestType digest_type = 5 [(buf.validate.field).enum.defined_only = true];
}

message ListLabelHistoryResponse {
  // The next page token.
  //
  /// If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The listed Commits that represent the history of the Label.
  repeated Commit commits = 2;
}

message CreateLabelsRequest {
  // An individual request to create a Label.
  message Value {
    // The Labels to create.
    LabelRef label_ref = 1 [(buf.validate.field).required = true];
    // The id of the Commit to associate with the Label.
    string commit_id = 2 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.uuid = true
    ];
  }
  // The Labels to create.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message CreateLabelsResponse {
  // The created Labels in the same order as given on the request.
  repeated Label labels = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ArchiveLabelsRequest {
  // The Labels to archive.
  repeated LabelRef label_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message ArchiveLabelsResponse {}
