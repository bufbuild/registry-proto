// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.plugin.v1beta1;

import "buf/registry/plugin/v1beta1/generated_sdk.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

// An immutable snapshot of a specific version of a Plugin that was pushed to the BSR. It captures
// the Plugin's state at the time of the push and cannot be modified since some contents are used in
// code generation and we want to ensure that the code generated from a specific version of a Plugin
// does not change.
message PluginVersion {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The id of the PluginVersion.
  string id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The time the PluginVersion was pushed to the BSR.
  //
  // PluginVersion are immutable, so there is no corresponding update_time.
  google.protobuf.Timestamp create_time = 2 [(buf.validate.field).required = true];
  // The id of the Organization that owns the Plugin that the PluginVersion is associated with.
  string owner_id = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The id of the Plugin that the PluginVersion is associated with.
  string plugin_id = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The version of the Plugin. Must be a semantic version without a prelease or build metadata, and
  // must be prefixed with a "v". For example, "v1.32.4".
  string version = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {pattern: "^v(\\d|[1-9]\\d*)\\.(\\d|[1-9]\\d*)\\.(\\d|[1-9]\\d*)$"}
  ];
  // A revision is a monotonically increasing number that is incremented whenever the same version
  // but different metadata is pushed to the BSR.
  //
  // Not an exhaustive list, but some examples of metadata that would cause a revision to be
  // incremented:
  //
  // - License changes
  // - Registry type changes
  // - Output language changes
  // - Build changes, such as a new docker image or wasm module digest
  int32 revision = 6 [(buf.validate.field).required = true];
  // The URL to the license of the Plugin.
  string license_url = 7 [
    (buf.validate.field).string.uri = true,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  // The SPDX identifier of the license of the Plugin.
  string license_spdx_identifier = 8;
  // TODO(mf): should this and operation be a repeated field? I.e., a single plugin could satisfy multiple operations?
  repeated PluginType plugin_type = 9 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];
  // TODO(mf): couldn't think of a better name for a generic field that could be used for any plugin type

  CodeGenerationConfig code_generation = 10;
  CheckConfig check = 11;

  Reference reference = 12; // TBD
}

// The type of the Plugin.
enum PluginType {
  PLUGIN_TYPE_UNSPECIFIED = 0;
  PLUGIN_TYPE_PROTOC_CODE_GENERATION = 1;
  PLUGIN_TYPE_CODE_GENERATION = 2;
  PLUGIN_TYPE_CHECK = 3;
}

message CodeGenerationConfig {
  // The language that the plugin outputs.
  PluginLanguage language = 1 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).enum.not_in = 0
  ];
}

message CheckConfig {}

// The language that the plugin outputs.
enum PluginLanguage {
  PLUGIN_LANGUAGE_UNSPECIFIED = 0;
  PLUGIN_LANGUAGE_GO = 1;
  PLUGIN_LANGUAGE_JAVASCRIPT = 2;
  PLUGIN_LANGUAGE_TYPESCRIPT = 3;
  PLUGIN_LANGUAGE_SWIFT = 4;
  PLUGIN_LANGUAGE_CPP = 5;
  PLUGIN_LANGUAGE_JAVA = 6;
  PLUGIN_LANGUAGE_DART = 7;
  PLUGIN_LANGUAGE_RUST = 8;
  PLUGIN_LANGUAGE_PYTHON = 9;
  PLUGIN_LANGUAGE_RUBY = 10;
  PLUGIN_LANGUAGE_KOTLIN = 11;
  PLUGIN_LANGUAGE_OBJECTIVE_C = 12;
  PLUGIN_LANGUAGE_PHP = 13;
  PLUGIN_LANGUAGE_CSHARP = 14;
  PLUGIN_LANGUAGE_SCALA = 15;
  PLUGIN_LANGUAGE_C = 16;
}

// The runtime type of the PluginVersion.
enum RuntimeType {
  RUNTIME_TYPE_UNSPECIFIED = 0;
  // The PluginVersion is a Docker image.
  RUNTIME_TYPE_DOCKER = 1;
  // The PluginVersion is a WASI module.
  RUNTIME_TYPE_WASIP1 = 2;
}
