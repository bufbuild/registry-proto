// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1;

import "buf/registry/module/v1/module.proto";
import "buf/registry/owner/v1/owner.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1";

// Operate on Modules.
service ModuleService {
  // Get Modules by id or name.
  rpc GetModules(GetModulesRequest) returns (GetModulesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Modules, usually for a specific User or Organization.
  rpc ListModules(ListModulesRequest) returns (ListModulesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Create new Modules.
  //
  // New modules are created with a default Label named "main".
  //
  // This operation is atomic. Either all Modules are created or an error is returned.
  rpc CreateModules(CreateModulesRequest) returns (CreateModulesResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Update existing Modules.
  //
  // This operation is atomic. Either all Modules are updated or an error is returned.
  rpc UpdateModules(UpdateModulesRequest) returns (UpdateModulesResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Delete existing Modules.
  //
  // This operation is atomic. Either all Modules are deleted or an error is returned.
  rpc DeleteModules(DeleteModulesRequest) returns (DeleteModulesResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message GetModulesRequest {
  // The Modules to request.
  repeated ModuleRef module_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetModulesResponse {
  // The retrieved Modules in the same order as requested.
  repeated Module modules = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListModulesRequest {
  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by create_time newest to oldest.
    ORDER_CREATE_TIME_DESC = 1;
    // Order by create_time oldest to newest.
    ORDER_CREATE_TIME_ASC = 2;
  }
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned.
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The specific Users or Organizations to list Modules for.
  //
  // If empty, all Modules for all owners are listed, but this functionality
  // is limited to Users with the necessary permissions.
  repeated buf.registry.owner.v1.OwnerRef owner_refs = 3;
  // The order to return the Modules.
  //
  // If not specified, defaults to ORDER_CREATE_TIME_DESC.
  Order order = 4 [(buf.validate.field).enum.defined_only = true];
}

message ListModulesResponse {
  // The next page token.
  //
  // If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The listed Modules.
  repeated Module modules = 2;
}

message CreateModulesRequest {
  // An individual request to create a Module.
  message Value {
    // The User or Organization to create the Module under.
    buf.registry.owner.v1.OwnerRef owner_ref = 1 [(buf.validate.field).required = true];
    // The name of the Module.
    string name = 2 [(buf.validate.field).string = {
      min_len: 2
      max_len: 100
    }];
    // The module's visibility.
    ModuleVisibility visibility = 3 [
      (buf.validate.field).required = true,
      (buf.validate.field).enum.defined_only = true
    ];
    // The configurable description of the Module.
    string description = 4 [(buf.validate.field).string.max_len = 350];
    // The configurable URL in the description of the module.
    string url = 5 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 255,
      (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
    ];
    // The name of the default Label of the Module.
    //
    // If not set, the default Label will be named "main" upon creation.
    //
    // This may point to an archived Label.
    string default_label_name = 6 [(buf.validate.field).string.max_len = 250];
  }
  // The Modules to create.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message CreateModulesResponse {
  // The created Modules in the same order as given on the request.
  repeated Module modules = 1 [(buf.validate.field).repeated.min_items = 1];
}

message UpdateModulesRequest {
  // An individual request to update a Module.
  message Value {
    // The Module to update.
    ModuleRef module_ref = 1 [(buf.validate.field).required = true];
    // The module's visibility.
    optional ModuleVisibility visibility = 3 [
      (buf.validate.field).enum.defined_only = true,
      (buf.validate.field).enum.not_in = 0
    ];
    // The deprecation status of the module.
    optional ModuleState state = 4 [
      (buf.validate.field).enum.defined_only = true,
      (buf.validate.field).enum.not_in = 0
    ];
    // The configurable description of the module.
    optional string description = 5 [(buf.validate.field).string.max_len = 350];
    // The configurable URL in the description of the module.
    optional string url = 6 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 255,
      (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
    ];
    // The name of the default Label of the Module.
    //
    // This Label may not yet exist.
    //
    // This may not point to an archived Label.
    optional string default_label_name = 7 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 250
    ];
  }
  // The Modules to update.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message UpdateModulesResponse {
  // The updated Modules in the same order as given on the request.
  repeated Module modules = 1 [(buf.validate.field).repeated.min_items = 1];
}

message DeleteModulesRequest {
  // The Modules to delete.
  repeated ModuleRef module_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message DeleteModulesResponse {}
