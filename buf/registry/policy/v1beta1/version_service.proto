// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.policy.v1beta1;

import "buf/registry/policy/v1beta1/resource.proto";
import "buf/registry/policy/v1beta1/version.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/policy/v1beta1";

// Operate on Versions.
service VersionService {
  // Get Versions.
  rpc GetVersions(GetVersionsRequest) returns (GetVersionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Versions for a given Policy.
  rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetVersionsRequest {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // References to request a Version for.
  //
  // See the documentation on ResourceRef for resource resolution details.
  //
  // Resolution is as follows:
  //   - If a Policy is referenced, the latest Version of the Policy is returned.
  //   - If a Version is referenced, then the Version is returned.
  repeated ResourceRef resource_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetVersionsResponse {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The found Versions in the same order as requested.
  repeated Version versions = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListVersionsRequest {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by create_time newest to oldest.
    ORDER_CREATE_TIME_DESC = 1;
    // Order by create_time from oldest to newest.
    ORDER_CREATE_TIME_ASC = 2;
  }
  // The maximum number of items to return.
  //
  // The default is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned.
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The reference to list Versions for.
  //
  // See the documentation on Ref for resource resolution details.
  //
  // Once the resource is resolved, the following Versions are listed (subject to any additional filters in the request):
  //   - If a Policy is referenced, all Versions for the Policy are returned.
  //   - If a Version is referenced, the Version is returned.
  ResourceRef resource_ref = 3 [(buf.validate.field).required = true];
  // The order to return the Versions.
  //
  // If not specified, defaults to ORDER_CREATE_TIME_DESC.
  Order order = 4 [(buf.validate.field).enum.defined_only = true];
}

message ListVersionsResponse {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The next page token.
  //
  // If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The listed Versions.
  repeated Version versions = 2;
}
