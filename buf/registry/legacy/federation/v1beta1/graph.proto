// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.legacy.federation.v1beta1;

import "buf/registry/module/v1beta1/commit.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/legacy/federation/v1beta1";

// A dependency graph that allows for federation.
//
// See the package documentation for more details. You should likely use buf.registry.module.v1beta1
// and not this package.
message Graph {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // A Commit in the dependency graph.
  //
  // This wraps the top-level Commit.
  message Commit {
    // The top-level Commit.
    buf.registry.module.v1beta1.Commit commit = 1 [(buf.validate.field).required = true];
    // The registry hostname of the Commit.
    string registry = 2 [(buf.validate.field).required = true];
  }
  // A node in the dependency graph.
  message Node {
    // The commit of the node.
    string commit_id = 1 [(buf.validate.field).required = true];
    // The registry hostname of the Node.
    string registry = 2 [(buf.validate.field).required = true];
  }
  // An edge in the dependency graph.
  message Edge {
    // The Node of the start of the edge.
    Node from_node = 1 [(buf.validate.field).required = true];
    // The Node of the end of the edge.
    Node to_node = 2 [(buf.validate.field).required = true];
  }

  // The nodes of the graph, each of which are Commits.
  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
  // The edges of the graph.
  repeated Edge edges = 2;
}
