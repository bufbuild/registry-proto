// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.policy.v1beta1;

import "buf/registry/policy/v1beta1/commit.proto";
import "buf/registry/policy/v1beta1/policy.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/policy/v1beta1";

// Upload contents.
service UploadService {
  // Upload contents for given set of Policies.
  //
  // Contents are expected to be a single YAML file.
  rpc Upload(UploadRequest) returns (UploadResponse) {}
}

message UploadRequest {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // Content to upload.
  message Content {
    // The Policy of the reference.
    PolicyRef policy_ref = 1 [(buf.validate.field).required = true];
    // The content to upload.
    bytes content = 2 [(buf.validate.field).required = true];
    // The labels to associate with the Commit for the Content.
    //
    // If an id is set, this id must represent a Label that already exists and is owned by the
    // Policy. The Label will point to the newly-created Commits for the References, or will be
    // updated to point to the pre-existing Commit for the Reference.
    //
    // If no labels are referenced, the default Label for the Policy is used.
    //
    // If the Labels do not exist, they will be created. If the Labels were archived, they will be
    // unarchived.
    repeated ScopedLabelRef scoped_label_refs = 3;
  }
  // The Contents of all references.
  repeated Content contents = 1 [(buf.validate.field).repeated.min_items = 1];
}

message UploadResponse {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The Commits for each reference in the same order as given on the request.
  //
  // A single Commit will be returned for each reference. These Commits may or may not be new.
  // If nothing changed for a given reference (e.g. the same file contents as the latest), the
  // existing Commit will be returned.
  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
}
