// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/commit.proto";
import "buf/registry/module/v1beta1/digest.proto";
import "buf/registry/module/v1beta1/resource.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Operate on Commits.
service CommitService {
  // Get Commits.
  rpc GetCommits(GetCommitsRequest) returns (GetCommitsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Commits for a given Module, Label, or Commit.
  rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetCommitsRequest {
  // References to request a Commit for.
  //
  // See the documentation on ResourceRef for resource resolution details.
  //
  // Resolution is as follows:
  //   - If a Module is referenced, the Commit of the default Label is returned.
  //   - If a Label is referenced, the Commit of this Label is returned.
  //   - If a Commit is referenced, this Commit is returned.
  repeated ResourceRef resource_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
  // The DigestType to use for Digests returned on Commits.
  //
  // If this DigestType is not available, an error is returned.
  // Note that certain DigestTypes may be deprecated over time.
  //
  // If not set, the latest DigestType is used, currently B5.
  DigestType digest_type = 2 [(buf.validate.field).enum.defined_only = true];
}

message GetCommitsResponse {
  // The found Commits in the same order as requested.
  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListCommitsRequest {
  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by create_time newest to oldest.
    ORDER_CREATE_TIME_DESC = 1;
    // Order by create_time oldest to newest.
    ORDER_CREATE_TIME_ASC = 2;
  }
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned,
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The reference to list Commits for.
  //
  // See the documentation on Ref for resource resolution details.
  //
  // Once the resource is resolved, the following Commits are listed (subject to any additional filters in the request):
  //   - If a Module is referenced, all Commits for the Module are returned.
  //   - If a Label is referenced, the Commit the Label points to is returned.
  //     Use ListLabelHistory to get the history of Commits for a Label.
  //   - If a Commit is referenced, this Commit is returned.
  ResourceRef resource_ref = 3 [(buf.validate.field).required = true];
  // The order to return the Commits.
  //
  // If not specified, defaults to ORDER_CREATE_TIME_DESC.
  Order order = 4 [(buf.validate.field).enum.defined_only = true];
  // The DigestType to use for Digests returned on Commits.
  //
  // If this DigestType is not available, an error is returned.
  // Note that certain DigestTypes may be deprecated over time.
  //
  // If not set, the latest DigestType is used, currently B5.
  DigestType digest_type = 5 [(buf.validate.field).enum.defined_only = true];
  // Only return Commits with an id that contains this string using a case-insensitive comparison.
  string id_query = 6 [(buf.validate.field).string.max_len = 36];
}

message ListCommitsResponse {
  // The next page token.
  //
  // If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The listed Commits.
  repeated Commit commits = 2;
}
