// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/commit.proto";
import "buf/registry/module/v1beta1/file.proto";
import "buf/registry/module/v1beta1/label.proto";
import "buf/registry/module/v1beta1/module.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Upload contents.
service UploadService {
  // Upload contents for given set of Modules.
  //
  // Content consists of the Files: .proto files, license files, and documentation files.
  rpc Upload(UploadRequest) returns (UploadResponse) {}
}

message UploadRequest {
  // A dependency of one or more references specified by Contents.
  //
  // Dependencies between Contents are implicit and do not need to be specified. The BSR will detect
  // dependencies between Contents via .proto imports.
  message DepRef {
    // The commit_id of the dependency.
    string commit_id = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.tuuid = true
    ];
    // The registry hostname of the dependency.
    string registry = 2 [(buf.validate.field).required = true];
  }
  // Content to upload for a given reference.
  message Content {
    // The Module of the reference.
    ModuleRef module_ref = 1 [(buf.validate.field).required = true];
    // The Files of the Content.
    //
    // This will consist of the .proto files, license files, and documentation files.
    repeated File files = 2 [(buf.validate.field).repeated.min_items = 1];
    // The labels to associate with the Commit for the Content.
    //
    // If an id is set, this id must represent a Label that already exists and is
    // owned by the Module. The Label will point to the newly-created Commits for the References,
    // or will be updated to point to the pre-existing Commit for the Reference.
    //
    // If no labels are referenced, the default Label for the Module is used.
    //
    // If the Labels do not exist, they will be created.
    // If the Labels were archived, they will be unarchived.
    repeated ScopedLabelRef scoped_label_refs = 3;
    // The URL of the source control commit to associate with the Commit for this Content.
    //
    // BSR users can navigate to this link to find source control information that is relevant to this Commit
    // (e.g. commit description, PR discussion, authors, approvers, etc.).
    string source_control_url = 4 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 255,
      (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ];
  }
  // The Contents of all references.
  repeated Content contents = 1 [(buf.validate.field).repeated.min_items = 1];
  // The dependencies of the references specified by Contents.
  //
  // This will include all transitive dependencies.
  //
  // Dependencies between Contents are implicit and do not need to be specified. The BSR will detect
  // dependencies between Contents via .proto imports.
  //
  // Commits should be unique by Module, that is no two dep_refs should have the same Module but
  // different Commit IDs.
  repeated DepRef dep_refs = 2;
}

// See the package documentation for more details. You should likely use buf.registry.module.v1beta1
// and not this package.
message UploadResponse {
  // The Commits for each reference in the same order as given on the request.
  //
  // A single Commit will be returned for each reference. These Commits may or may not be new.
  // If nothing changed for a given reference, the existing Commit will be returned.
  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
}

// UploadErrorDetails is the error details for the Upload RPC.
message UploadErrorDetails {
  message DepRef {
    // The commit_id of the dependency.
    string commit_id = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.tuuid = true
    ];
    // The registry hostname of the dependency.
    string registry = 2 [(buf.validate.field).required = true];
  }
  // This contains the dep_refs that the server is unable to find. This is populated
  // when a non-found error is returned by the server.
  repeated DepRef not_found_dep_refs = 1;
}
