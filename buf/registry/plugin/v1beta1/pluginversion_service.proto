// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.plugin.v1beta1;

import "buf/registry/plugin/v1beta1/generated_sdk.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

// Operate on PluginVersions.
service PluginVersionService {
  // Get plugin versions for Plugins.
  rpc GetPluginVersions(GetPluginVersionsRequest) returns (GetPluginVersionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List plugin versions for a specific Plugin.
  rpc ListPluginVersions(ListPluginVersionsRequest) returns (ListPluginVersionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Create new PluginVersions for Plugins.
  rpc CreatePluginVersions(CreatePluginVersionsRequest) returns (CreatePluginVersionsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message GetPluginVersionsRequest {}

message GetPluginVersionsResponse {}

message ListPluginVersionsRequest {}

message ListPluginVersionsResponse {}

message CreatePluginVersionsRequest {
  // An individual request to create a Plugin.
  message Value {
    // The Organization to create the Plugin under. The OwnerRef must be a reference to an
    // Organization and cannot be a User reference.
    PluginRef plugin_ref = 1 [(buf.validate.field).required = true];
    // The version of the Plugin. Must be a semantic version without a prelease or build metadata, and
    // must be prefixed with a "v". For example, "v1.32.4".
    string version = 2 [(buf.validate.field).required = true];

    // A number that is acquired prior to pushing a new version of a Plugin.
    int32 revision = 3 [(buf.validate.field).required = true];
    // The URL to the license of the Plugin.
    string license_url = 4 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 255,
      (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ];
    // The SPDX identifier of the license of the Plugin.
    string license_spdx_identifier = 5;

    // The runtime type of the Plugin.
    //
    // TODO(mf): should we combine this into some kind of "runtime" field that includes the runtime type
    // and the reference?
    RuntimeType runtime_type = 6 [
      (buf.validate.field).required = true,
      (buf.validate.field).enum.defined_only = true
    ];
    // The reference to the Plugin.
    Reference reference = 7;
    // An optional configuration for plugins that support code generation.
    CodeGenerationConfig code_generation_config = 8;
  }
  // The Plugins to create.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message CreatePluginVersionsResponse {
  repeated PluginVersion plugin_versions = 1 [(buf.validate.field).repeated.min_items = 1];
}
