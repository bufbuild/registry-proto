// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.plugin.v1beta1;

import "buf/registry/plugin/v1beta1/code_generation_config.proto";
import "buf/registry/plugin/v1beta1/commit.proto";
import "buf/registry/plugin/v1beta1/plugin.proto";
import "buf/registry/plugin/v1beta1/resource.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/plugin/v1beta1";

// Upload contents.
service UploadService {
  // Upload contents for given set of Plugins.
  //
  // Contents are expected to be WASM modules.
  rpc Upload(UploadRequest) returns (UploadResponse) {}
  // UploadImage uploads an image.
  //
  // Content is referenced by the digest of the image.
  rpc UploadImage(UploadImageRequest) returns (UploadImageResponse) {}
}

message UploadRequest {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // Content to upload.
  message Content {
    // The Plugin of the reference.
    PluginRef plugin_ref = 1 [(buf.validate.field).required = true];
    // Compression type of the content.
    CompressionType compression_type = 2 [
      (buf.validate.field).required = true,
      (buf.validate.field).enum.defined_only = true
    ];
    // The content to upload.
    bytes content = 3;
  }
  // The Contents of all references.
  repeated Content contents = 1 [(buf.validate.field).repeated.min_items = 1];
}

message UploadResponse {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
}

message UploadImageRequest {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // Content to upload.
  message Content {
    // The Plugin of the reference.
    PluginRef plugin_ref = 1 [(buf.validate.field).required = true];
    // The version of the Plugin. Must be a semantic version without a prelease or build metadata,
    // and must be prefixed with a "v". For example, "v1.32.4".
    string version = 2 [(buf.validate.field).required = true];
    // A number that is acquired prior to pushing a new version of a Plugin.
    int32 revision = 3 [(buf.validate.field).required = true];
    // The URL to the license of the Plugin.
    string license_url = 4 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 255,
      (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ];
    // The SPDX identifier of the license of the Plugin.
    string license_spdx_identifier = 5;
    // The documentation of the Plugin.
    string doc = 6;
    // The configuration for code generation supported by the plugin.
    CodeGenerationConfig code_generation = 7;
  }
  // The Contents of all references.
  repeated Content contents = 1 [(buf.validate.field).repeated.min_items = 1];
}
message UploadImageResponse {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
}
