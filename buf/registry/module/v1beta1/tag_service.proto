// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/module.proto";
import "buf/registry/module/v1beta1/resource.proto";
import "buf/registry/module/v1beta1/tag.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Operate on Tags.
service TagService {
  // Get Tags by id or name.
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Tags for a given Module, Commit, Branch, or VCSCommit.
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Create new Tags on a Module.
  //
  // This operation is atomic. Either all Tags are created or an error is returned.
  rpc CreateTags(CreateTagsRequest) returns (CreateTagsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Create new Tags on a Module, and Update existing Tags on a Module.
  //
  // This operation is atomic. Either all Tags are created/updated or an error is returned.
  rpc CreateOrUpdateTags(CreateOrUpdateTagsRequest) returns (CreateOrUpdateTagsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Delete existing Tags.
  //
  // This operation is atomic. Either all Tags are deleted or an error is returned.
  rpc DeleteTags(DeleteTagsRequest) returns (DeleteTagsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message GetTagsRequest {
  // The Tags to request.
  repeated TagRef tag_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetTagsResponse {
  // The retrieved Tags in the same order as requested.
  repeated Tag tags = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListTagsRequest {
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned,
  string page_token = 2;
  // The reference to list Tags for.
  //
  // See the documentation on Ref for resource resolution details.
  //
  // Once the resource is resolved, the following Tags are listed:
  //   - If a Module is referenced, all Tags for the Module are returned.
  //   - If a Commit is referenced, all Tags for the Commit are returned.
  //   - If a Tag is referenced, this Tag is returned.
  //   - If a VCSCommit is referenced, all Tags for commits that the VCSCommit is associated with are returned.
  //   - Is a Branch is referenced, all Tags for Commits on the Branch are returned.
  //   - If a Digest is referenced, all Tags that contain a Commit with this Digest are returned.
  ResourceRef resource_ref = 3 [(buf.validate.field).required = true];
}

message ListTagsResponse {
  // The next page token.
  //
  /// If empty, there are no more pages.
  string next_page_token = 1;
  // The listed Tags.
  repeated Tag tags = 2;
}

message CreateTagsRequest {
  // An individual request to create a Tag.
  message Value {
    // The Tag name.
    //
    // If there is already a Tag with a name, the request errors. Otherwise, a new Tag will be
    // created associated with the commit identified.
    repeated string name = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.max_len = 250
    ];
    // The reference to resolve the Commit to which these Tags will be set.
    //
    // See the documentation on Ref for resource resolution details.
    //
    // The Tags are set depending on the kind of resource that is resolved:
    //   - If a Module is referenced, Tags are set to the latest released Commit in the module.
    //   - If a Commit is referenced, Tags are set for that Commit.
    //   - If a Tag is referenced, Tags are set for the Commit that this Tag references.
    //   - If a VCSCommit is referenced, Tags are set for the Commit that this VCSCommit references.
    //   - Is a Branch is referenced, Tags are set for the latest Commit on the Branch.
    //   - If a Digest is referenced, Tags are set for the most recent Commit with this Digest.
    ResourceRef resource_ref = 2 [(buf.validate.field).required = true];
  }
  // The Tags to create.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message CreateTagsResponse {
  // The created Tags in the same order as given on the request.
  repeated Tag tags = 1 [(buf.validate.field).repeated.min_items = 1];
}

message CreateOrUpdateTagsRequest {
  // An individual request to create or update a Tag.
  message Value {
    // The Tag names.
    //
    // If there is already a Tag with a name, it will be updated to be associated with
    // the commit identified. Otherwise, a new Tag will be created associated with the
    // commit identified.
    repeated string name = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.max_len = 250
    ];
    // The reference to resolve the Commit to which these Tags will be set.
    //
    // See the documentation on Ref for resource resolution details.
    //
    // The Tags are set depending on the kind of resource that is resolved:
    //   - If a Module is referenced, Tags are set to the latest released Commit in the module.
    //   - If a Commit is referenced, Tags are set for that Commit.
    //   - If a Tag is referenced, Tags are set for the Commit that this Tag references.
    //   - If a VCSCommit is referenced, Tags are set for the Commit that this VCSCommit references.
    //   - Is a Branch is referenced, Tags are set for the latest Commit on the Branch.
    //   - If a Digest is referenced, Tags are set for the most recent Commit with this Digest.
    ResourceRef resource_ref = 2 [(buf.validate.field).required = true];
  }
  // The Tags to create or update.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message CreateOrUpdateTagsResponse {
  // The created or updated Tags in the same order as given on the request.
  repeated Tag tags = 1 [(buf.validate.field).repeated.min_items = 1];
}

message DeleteTagsRequest {
  // The Tags to delete.
  repeated TagRef tag_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message DeleteTagsResponse {}
