// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.plugin.v1beta1;

import "buf/registry/plugin/v1beta1/digest.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/plugin/v1beta1";

// A commit on a specific Plugin.
//
// Commits are immutable.
//
// Many Commits may be associated with one Digest.
//
// Not that the Digest returned on a Commit depends on the requested DigestType in the
// RPC that returned the Commit.
message Commit {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The id of the Commit.
  string id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The time the Commit was pushed to the BSR.
  //
  // Commits are immutable, so there is no corresponding update_time.
  google.protobuf.Timestamp create_time = 2 [(buf.validate.field).required = true];
  // The id of the User or Organization that owns the Plugin that the Commit is associated with.
  string owner_id = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The id of the Plugin that the Commit is associated with.
  string plugin_id = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The Digest of the Commit's contents.
  Digest digest = 5 [(buf.validate.field).required = true];
  // The id of the User that created this Commit on the BSR.
  //
  // May be empty if the User is no longer available.
  string created_by_user_id = 6 [
    (buf.validate.field).string.tuuid = true,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  // The URL to the license of the Plugin.
  string license_url = 7 [
    (buf.validate.field).string.uri = true,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  // The SPDX identifier of the license of the Plugin.
  string license_spdx_identifier = 8;
  // The plugin types the Commit supports. Must have at least one element.
  repeated PluginType plugin_type = 9 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.unique = true,
    (buf.validate.field).repeated.items.enum.defined_only = true,
    (buf.validate.field).repeated.items.enum.not_in = 0
  ];
  //
}

// The type of the Plugin.
enum PluginType {
  PLUGIN_TYPE_UNSPECIFIED = 0;
  PLUGIN_TYPE_PROTOC_CODE_GENERATION = 1;
  PLUGIN_TYPE_CODE_GENERATION = 2;
  PLUGIN_TYPE_CHECK = 3;
}

// The configuration for a check plugin.
//
// TODO(mf): we might want to remove this entirely, as it's not clear what this would be used for.
// The Rules and Categories are a property of the plugin itself, and not what a user would define.
// At most we'll want to keep this around for Responses to surface Rules and/or Categories, but this
// is not clear yet.
message CheckConfig {}

// The runtime type of the Commit.
enum RuntimeType {
  RUNTIME_TYPE_UNSPECIFIED = 0;
  // The Commit is a Docker image.
  RUNTIME_TYPE_DOCKER = 1;
  // The Commit is a WASI module.
  RUNTIME_TYPE_WASIP1 = 2;
}
