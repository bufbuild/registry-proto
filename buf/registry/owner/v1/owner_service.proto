// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.owner.v1;

import "buf/registry/owner/v1/owner.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/owner/v1";

// Operate on Users and Organizations in situations where you only
// know a reference to an owner, without knowing whether or not that
// owner is a User or Organization.
service OwnerService {
  // Get Users or Organizations by id or name.
  rpc GetOwners(GetOwnersRequest) returns (GetOwnersResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetOwnersRequest {
  // The Users or Organizations to request.
  repeated OwnerRef owner_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetOwnersResponse {
  // The retrieved Users or Organizations in the same order as requested.
  repeated Owner owners = 1 [(buf.validate.field).repeated.min_items = 1];
}
