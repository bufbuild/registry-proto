// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/file.proto";
import "buf/registry/module/v1beta1/label.proto";
import "buf/registry/module/v1beta1/module.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Upload contents.
service UploadService {
  // Upload contents for a given module.
  //
  // Content consists of:
  //   - The Files: .proto files, license files, and documentation files.
  //   - The dependencies.
  //
  // Uploads require all data for dependencies to be pushed from the client-side. A given
  // upload request must therefore be self-contained.
  rpc Upload(UploadRequest) returns (UploadResponse) {}
}

message UploadRequest {
  // A dependency for a given reference.
  message Dep {
    // The Module of the dependency.
    ModuleRef module_ref = 1 [(buf.validate.field).required = true];
    // The Files of the dependency.
    //
    // This will consist of the .proto files, license files, and documentation files.
    repeated File files = 2;
  }
  // A set of content for a given reference.
  message Content {
    // The Module of the content.
    ModuleRef module_ref = 1 [(buf.validate.field).required = true];
    // The Files of the content.
    //
    // This will consist of the .proto files, license files, and documentation files.
    repeated File files = 2;
    // The dependencies of the reference.
    //
    // This will include all transitive dependencies.
    //
    // The .proto files of the Content and the Deps compromise a self-contained set of .proto
    // files that can be independently built.
    repeated Dep deps = 3;
    // The labels to associate with the content.
    //
    // If an id is set, this id must represent a Label that already exists and is
    // owned by the Module.
    repeated ScopedLabelRef scoped_label_refs = 4;
  }
  // The Contents of the modules to upload data for.
  //
  // A single Content represents a single module and all of its dependencies. There
  // is no deduplication across individial Content messages.
  repeated Content contents = 1 [(buf.validate.field).repeated.min_items = 1];
}

message UploadResponse {}
