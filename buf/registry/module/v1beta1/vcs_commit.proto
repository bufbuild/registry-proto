// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// The VCS type, currently only git.
enum VCSType {
  VCS_TYPE_UNSPECIFIED = 0;
  // The git version control system.
  VCS_TYPE_GIT = 1;
}

// VCS commit information.
//
// Stored within a Commit, not a resource on its own. Commits <-> VCSCommits are many-to-many,
// we do not enforce any uniqueness principles here, VCSCommits should just be considered
// metadata on a given Commit. As such, making them their own entity would result in checks
// we don't want to enforce. It is still split out into a separate message so that we can
// enforce required checks on certain fields iff VCSCommit is present.
//
// TODO: Below is the explanation, but it's a little unsatisfying. Perhaps we revisit making
// VCSCommit an entity?
//
// Multiple BSR commits may have the same content, but different VCS hashes. This costs some
// storage, but it allows the BSR to more accurately link back to source control. (For example,
// git commit A introduces a new service, commit B modifies it, and commit C deletes the
// service and moves the functionality to a different module. We want the BSR commits created
// from A and C to link back to the correct git commits and PR discussions.)
//
// Multiple BSR commits may have the same VCS hash, but different content. This should only
// happen when users incorrectly hand-specify the VCS hash — and since commits are immutable and
// can’t be deleted, we don’t want a manually-created commit to forever block a later,
// fully-correct commit.
message VCSCommit {
  // The type of VCS that the Commit originated from.
  VCSType type = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];
  // The VCS hash of the Commit.
  string hash = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[0-9a-fA-F]{40}$"
  ];
  // The URL of of the commit within the VCS.
  string url = 3 [(buf.validate.field).string.uri = true];
}
