// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1;

import "buf/registry/module/v1/resource.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1";

message Type {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The id of the Type.
  //
  // Uniquely identifies a type within a Commit on a Module.
  string id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The time the Type was pushed to the BSR.
  //
  // Types are immutable, so there is no corresponding update_time.
  google.protobuf.Timestamp create_time = 2 [(buf.validate.field).required = true];
  // The id of the User or Organization that owns the Module that the Type is associated with.
  string owner_id = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The id of the Module that the Type is associated with.
  string module_id = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The id of the Commit that the Type is associated with.
  string commit_id = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.tuuid = true
  ];
  // The Type's fully-qualified name.
  //
  // This excludes any leading "."s, so for example the fully-qualified name of
  // Type is "buf.registry.module.v1.Type".
  string name = 6 [(buf.validate.field).required = true];
}

// TypeRef is a reference to a Type, either an id or a fully-qualified name.
//
// This is used in requests.
message TypeRef {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // The fully-qualified name of a Type within a BSR instance.
  //
  // A Name uniquely identifies a Type.
  // This is used for requests when a caller only has the type name and not the ID.
  message Name {
    // The reference that contains the Type.
    //
    // See the documentation on ResourceRef for resource resolution details.
    //
    // Once the resource is resolved, the following content is returned:
    //   - If a Module is referenced, the Type of the given name on the Commit of the default Label is returned.
    //   - If a Label is referenced, the Type of the given name on the Commit of this Label is returned.
    //   - If a Commit is referenced, the Type of the given name on this Commit is returned.
    ResourceRef resource_ref = 1 [(buf.validate.field).required = true];
    // The Type's fully-qualified name.
    //
    // This excludes any leading "."s, so for example the fully-qualified name of
    // Type is "buf.registry.module.v1.Type".
    string name = 2 [(buf.validate.field).required = true];
  }

  oneof value {
    option (buf.validate.oneof).required = true;
    // The id of the Type.
    string id = 1 [(buf.validate.field).string.tuuid = true];
    // The fully-qualified name of the Type.
    Name name = 2;
  }
}
