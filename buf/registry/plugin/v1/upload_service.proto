// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.plugin.v1;

import "buf/registry/plugin/v1/commit.proto";
import "buf/registry/plugin/v1/label.proto";
import "buf/registry/plugin/v1/plugin.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/plugin/v1";

// Upload contents.
service UploadService {
  // Upload contents for given set of Plugins.
  //
  // Contents are expected to be WASM modules.
  rpc Upload(UploadRequest) returns (UploadResponse) {}
}

message UploadRequest {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // Content to upload.
  message Content {
    // The Plugin of the reference.
    PluginRef plugin_ref = 1 [(buf.validate.field).required = true];
    // Compression type of the content.
    CompressionType compression_type = 2 [
      (buf.validate.field).required = true,
      (buf.validate.field).enum.defined_only = true
    ];
    // The content to upload.
    bytes content = 3 [(buf.validate.field).required = true];
    // The labels to associate with the Commit for the Content.
    //
    // If an id is set, this id must represent a Label that already exists and is
    // owned by the Plugin. The Label will point to the newly-created Commits for the References,
    // or will be updated to point to the pre-existing Commit for the Reference.
    //
    // If no labels are referenced, the default Label for the Plugin is used.
    //
    // If the Labels do not exist, they will be created. If the Labels were archived, they will be
    // unarchived.
    repeated ScopedLabelRef scoped_label_refs = 4;
    // The URL of the source control commit to associate with the Commit for this Content.
    //
    // BSR users can navigate to this link to find source control information that is relevant to
    // this Commit (e.g. commit description, PR discussion, authors, approvers, etc.).
    string source_control_url = 5 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 255,
      (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ];
  }
  // The Contents of all references.
  repeated Content contents = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 10
  ];
}

message UploadResponse {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  repeated Commit commits = 1 [(buf.validate.field).repeated.min_items = 1];
}

// The type of compression.
enum CompressionType {
  COMPRESSION_TYPE_UNSPECIFIED = 0;
  // No compression.
  COMPRESSION_TYPE_NONE = 1;
  // Zstandard compression.
  COMPRESSION_TYPE_ZSTD = 2;
}
