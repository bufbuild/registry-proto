// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/digest.proto";
import "buf/registry/module/v1beta1/file.proto";
import "buf/registry/module/v1beta1/module.proto";
import "buf/registry/module/v1beta1/resource.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Download contents.
service DownloadService {
  // Download the contents of multiple Modules, Labels, Digests, or Commits.
  //
  // Content consists of:
  //   - The Files: .proto files, license files, and documentation files.
  //   - The dependencies.
  rpc Download(DownloadRequest) returns (DownloadResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message DownloadRequest {
  // A specific file type to request.
  enum FileType {
    FILE_TYPE_UNSPECIFIED = 0;
    // A .proto file.
    FILE_TYPE_PROTO = 1;
    // A documentation file.
    //
    // Documentation files are always named README.md, README.markdown, or buf.md.
    FILE_TYPE_DOC = 2;
    // A license file.
    //
    // License files are always named LICENSE.
    FILE_TYPE_LICENSE = 3;
  }
  // An individual request for content.
  message Value {
    // The reference to get content for.
    //
    // See the documentation on ResourceRef for resource resolution details.
    //
    // Once the resource is resolved, the following content is returned:
    //   - If a Module is referenced, the content of the default Label is returned.
    //   - If a Label is referenced, the content associated with this Label is returned.
    //   - If a Commit is referenced, the content for the Commit is returned.
    //   - If a Digest is referenced, the content the Digest is returned.
    ResourceRef resource_ref = 1 [(buf.validate.field).required = true];
    // Specific file types to request.
    //
    // If not set, all file types are returned.
    repeated FileType file_types = 2 [(buf.validate.field).enum.defined_only = true];
    // Specific file paths to retrieve.
    //
    // May be directories. For example, path "foo/bar" will result in files "foo/bar/baz.proto",
    // "foo/bar/LICENSE" being downloaded.
    //
    // If empty, all file paths for the given reference are retrieved.
    //
    // If no paths match, an empty Files list will be returned, however the call may still
    // be successful if paths_allow_not_exist is set (the dependency list may still be on
    // the response).
    //
    // The path must be relative, and connect contain any "." or ".." components
    // The separator "/" must be used.
    repeated string paths = 3 [(buf.validate.field).repeated.items = {
      string: {
        max_len: 4096
        not_contains: "\\"
        pattern: "^([^/.][^/]?|[^/][^/.]|[^/]{3,})(/([^/.][^/]?|[^/][^/.]|[^/]{3,}))*$"
      }
    }];
    // Whether to allow file paths not to exist within the given module.
    //
    // For example, one may want to retrieve the file paths "buf.md" and "README.md",
    // but only expect one to actually exist.
    //
    // If false, it is an error to specify non-existent file paths.
    bool paths_allow_not_exist = 4;
    // Whether to include the dependencies in the response.
    bool include_deps = 5;
    // Whether to also include the files of the dependencies in the response.
    //
    // If not set, each Dep in the response will only have its Module and Digest set.
    //
    // include_deps must be set if include_dep_files is set.
    // TODO: validate this. Or turn this into an enum.
    bool include_dep_files = 6;
    // The DigestType to return for content and dependencies.
    //
    // If this DigestType is not available, an error is returned.
    // Note that certain DigestTypes may be deprecated over time.
    //
    // If not set, the latest DigestType is used.
    // TODO: should we default?
    DigestType digest_type = 7;
  }
  // The contents to request.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message DownloadResponse {
  // A dependency of the reference.
  message Dep {
    // The Module of the dependency.
    Module module = 1 [(buf.validate.field).required = true];
    // The Digest of the dependency.
    //
    // The DigestType will match the type given on the request. If this DigestType
    // is not available, an error is returned.
    Digest digest = 2 [(buf.validate.field).required = true];
    // The Files of the dependency, if include_dep_files was set.
    //
    // This will consist of the .proto files, license files, and documentation files.
    //
    // If include_dep_files was not set, this will be empty.
    repeated File files = 3;
  }
  // A set of content for a given reference.
  message Content {
    // The Module of the content.
    Module module = 1 [(buf.validate.field).required = true];
    // The Digest of the content.
    //
    // The DigestType will match the type given on the request. If this DigestType
    // is not available, an error is returned.
    Digest digest = 2 [(buf.validate.field).required = true];
    // The Files of the content.
    //
    // This will consist of the .proto files, license files, and documentation files.
    //
    // If no paths match and paths_allow_not_exist is set, this may be empty.
    repeated File files = 3;
    // The dependencies of the reference, if include_deps was set.
    //
    // This will include all transitive dependencies.
    //
    // If include_deps was not set, this will be empty.
    //
    // If include_dep_files is set, the Deps will have the files of the dependencies as well.
    // The .proto files of the Content and the Deps compromise a self-contained set of .proto
    // files that can be independently built.
    repeated Dep deps = 4;
  }
  // The Contents of the references in the same order as requested.
  repeated Content contents = 1 [(buf.validate.field).repeated.min_items = 1];
}
