// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/digest.proto";
import "buf/registry/module/v1beta1/file.proto";
import "buf/registry/module/v1beta1/module.proto";
import "buf/registry/module/v1beta1/resource.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Upload contents.
service UploadService {
  // Upload contents for a given Label.
  //
  // Content consists of:
  //   - The Files: .proto files, license files, and documentation files.
  //   - The dependencies.
  rpc Upload(UploadRequest) returns (UploadResponse) {}
}

message UploadRequest {
  // An individual request to upload content.
  message Value {
    ModuleRef module_ref = 1 [(buf.validate.field).required = true];
    // The labels to associated with the content.
    //
    // If an id is set, this id must represent a Label that already exists and is
    // owned by the Module.
    repeated ScopedLabelRef scoped_label_refs = 2;
  }
  // The contents to upload.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message UploadResponse {
  // A dependency of the reference.
  message Dep {
    // The Module of the dependency.
    Module module = 1 [(buf.validate.field).required = true];
    // The Digest of the dependency.
    Digest digest = 2 [(buf.validate.field).required = true];
    // The Files of the dependency, if include_dep_files was set.
    //
    // If include_dep_files was not set, this will be empty.
    //
    // This will consist of the .proto files, license files, and documentation files.
    repeated File files = 3 [(buf.validate.field).repeated.min_items = 1];
  }
  // A set of content.
  message Content {
    // The Files of the reference.
    //
    // This will consist of the .proto files, license files, and documentation files.
    repeated File files = 1 [(buf.validate.field).repeated.min_items = 1];
    // The dependencies of the reference, if include_deps was set.
    //
    // If include_deps was not set, this will be empty.
    //
    // If include_dep_files is set, the Deps will have the files of the dependencies as well.
    // The .proto files of the Content and the Deps compromise a self-contained set of .proto
    // files that can be independently built.
    repeated Dep deps = 2;
  }
  // The Contents of the references in the same order as requested.
  repeated Content contents = 1 [(buf.validate.field).repeated.min_items = 1];
}
