// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/digest.proto";
import "buf/registry/priv/extension/v1beta1/extension.proto";
import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// A commit on a specific Module.
//
// Commits are immutable.
//
// Many Digests may be associated with one Commit.
message Commit {
  option (buf.registry.priv.extension.v1beta1.message).response_only = true;

  // The id of the Commit.
  string id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // The time the Commit was pushed to the BSR.
  //
  // Commits are immutable, so there is no corresponding update_time.
  google.protobuf.Timestamp create_time = 2 [(buf.validate.field).required = true];
  // The id of the User or Organization that owns the Module that the Commit is associated with.
  string owner_id = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // The id of the Module that the Commit is associated with.
  string module_id = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
  // The digest of the Commit's contents.
  //
  // TODO: What to do about requested digest types? We don't actually expose the
  // ability to switch the requested digest type at this point. It is a little
  // weird for the digest type to be dynamic on an entity, which would lead to
  // this being repeated here, but a repeated field on an entity is weird too.
  Digest digest = 5 [(buf.validate.field).required = true];
  // The id of the User that created this Commit on the BSR.
  string created_by_user_id = 6 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
}

// CommitRef is a reference to a Commit.
//
// Currently, this is just an ID, but this structure is in place for symmetry and forwards-compatibility.
//
// This is used in requests.
message CommitRef {
  option (buf.registry.priv.extension.v1beta1.message).request_only = true;

  // The id of the Commit.
  string id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];
}
