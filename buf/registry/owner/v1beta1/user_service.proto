// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.owner.v1beta1;

import "buf/registry/owner/v1beta1/organization.proto";
import "buf/registry/owner/v1beta1/user.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/owner/v1beta1";

// Operate on Users.
service UserService {
  // Get Users by id or name.
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Users, usually by Organization.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Create new Users.
  //
  // This operation is atomic. Either all Users are created or an error is returned.
  rpc CreateUsers(CreateUsersRequest) returns (CreateUsersResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Update existing Users.
  //
  // This operation is atomic. Either all Users are updated or an error is returned.
  rpc UpdateUsers(UpdateUsersRequest) returns (UpdateUsersResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Delete existing Users.
  //
  // This operation is atomic. Either all Users are deleted or an error is returned.
  rpc DeleteUsers(DeleteUsersRequest) returns (DeleteUsersResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message GetUsersRequest {
  // The Users to request.
  repeated UserRef user_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetUsersResponse {
  // The retreived Users in the same order as requested.
  repeated User users = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListUsersRequest {
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned,
  string page_token = 2 [(buf.validate.field).string.max_len = 255];
  // The specific Organizations to list Users for.
  //
  // If this is empty, all Users for all Organizations are listed, but this functionality
  // is limited to Users with the necessary permissions.
  repeated OrganizationRef organization_refs = 3;
}

message ListUsersResponse {
  // The next page token.
  //
  /// If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 255];
  // The list of Users.
  repeated User users = 2;
}

message CreateUsersRequest {
  // An individual request to create a User.
  message Value {
    // The name of the User.
    string name = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.max_len = 255
    ];
    // The type of the User.
    //
    // If not set, the default USER_TYPE_STANDARD is used.
    UserType type = 2 [(buf.validate.field).enum.defined_only = true];
    // The configurable description of the User.
    string description = 3 [(buf.validate.field).string.max_len = 350];
    // The configurable URL that represents the homepage for a User.
    string url = 4 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 1023
    ];
    // The verification status of the User.
    //
    // If not set, the User will default to VERIFICATION_STATUS_UNVERIFIED.
    UserVerificationStatus verification_status = 5 [(buf.validate.field).enum.defined_only = true];
  }
  // The Users to create.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message CreateUsersResponse {
  // The created Users in the same order as given on the request.
  repeated User users = 1 [(buf.validate.field).repeated.min_items = 1];
}

message UpdateUsersRequest {
  // An individual request to update a User.
  message Value {
    // The User to update.
    UserRef user_ref = 1 [(buf.validate.field).required = true];
    // The state of the User.
    optional UserState state = 2 [(buf.validate.field).enum.defined_only = true];
    // The configurable description of the User.
    optional string description = 3 [(buf.validate.field).string.max_len = 350];
    // The configurable URL that represents the homepage for a User.
    optional string url = 4 [
      (buf.validate.field).string.uri = true,
      (buf.validate.field).string.max_len = 1023
    ];
    // The verification status of the User.
    optional UserVerificationStatus verification_status = 5 [(buf.validate.field).enum.defined_only = true];
  }
  // The Users to update.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message UpdateUsersResponse {
  // The updated Users in the same order as given on the request.
  repeated User users = 1 [(buf.validate.field).repeated.min_items = 1];
}

message DeleteUsersRequest {
  // The Users to delete.
  repeated UserRef user_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message DeleteUsersResponse {}
