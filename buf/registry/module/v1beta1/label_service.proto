// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.module.v1beta1;

import "buf/registry/module/v1beta1/commit.proto";
import "buf/registry/module/v1beta1/digest.proto";
import "buf/registry/module/v1beta1/label.proto";
import "buf/registry/module/v1beta1/resource.proto";
import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/module/v1beta1";

// Operate on Labels.
service LabelService {
  // Get Labels by id or name.
  rpc GetLabels(GetLabelsRequest) returns (GetLabelsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List Labels for a given Module, Commit, or CommitDigest.
  rpc ListLabels(ListLabelsRequest) returns (ListLabelsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List the history of a Label.
  rpc ListLabelHistory(ListLabelHistoryRequest) returns (ListLabelHistoryResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Create or update Labels on a Module.
  //
  // If the Label does not exist, it will be created.
  // If the Label was archived, it will be unarchived.
  // If the Label already existed, the Commit in the request has to be newer than the Commit that
  // the Label is currently pointing to, otherwise an error is returned.
  //
  // This operation is atomic. Either all Labels are created/updated or an error is returned.
  rpc CreateOrUpdateLabels(CreateOrUpdateLabelsRequest) returns (CreateOrUpdateLabelsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Archive existing Labels.
  //
  // This operation is atomic. Either all Labels are archived or an error is returned.
  rpc ArchiveLabels(ArchiveLabelsRequest) returns (ArchiveLabelsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Unarchive existing Labels.
  //
  // This operation is atomic. Either all Labels are unarchived or an error is returned.
  rpc UnarchiveLabels(UnarchiveLabelsRequest) returns (UnarchiveLabelsResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message GetLabelsRequest {
  // The Labels to request.
  //
  // This may reference archived Labels.
  repeated LabelRef label_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message GetLabelsResponse {
  // The retrieved Labels in the same order as requested.
  repeated Label labels = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ListLabelsRequest {
  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by create_time newest to oldest.
    ORDER_CREATE_TIME_DESC = 1;
    // Order by create_time oldest to newest.
    ORDER_CREATE_TIME_ASC = 2;
  }
  // A filter on whether a Label is archived or not.
  enum ArchiveFilter {
    ARCHIVE_FILTER_UNSPECIFIED = 0;
    // Return only unarchived labels.
    ARCHIVE_FILTER_UNARCHIVED_ONLY = 1;
    // Return only archived labels.
    ARCHIVE_FILTER_ARCHIVED_ONLY = 2;
    // Return both archived and unarchived labels.
    ARCHIVE_FILTER_ALL = 3;
  }
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned,
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The reference to list Labels for.
  //
  // See the documentation on Ref for resource resolution details.
  //
  // Once the resource is resolved, the following Labels are listed (subject to any additional filters in the request):
  //   - If a Module is referenced, all Labels for the Module are returned.
  //   - If a Label is referenced, this Label is returned.
  //   - If a Commit is referenced, all Labels that currently point to the Commit are returned. Note that
  //     Labels only point to passed or approved Commits, or Commits where policy checks were disabled.
  ResourceRef resource_ref = 3 [(buf.validate.field).required = true];
  // The order to return the Labels.
  //
  // If not specified, defaults to ORDER_CREATE_TIME_DESC.
  Order order = 4 [(buf.validate.field).enum.defined_only = true];
  // Only return Labels that point to a Commit with one of these CommitCheckStatus values.
  //
  // If not set, Labels that point to a Commit with any CommitCheckStatus value are returned.
  //
  // It is an error to filter on CommitCheckStatuses of pending or rejected, as Labels will only
  // point to Commits that are passed or approved, or that have policy checks disabled.
  repeated CommitCheckStatus commit_check_statuses = 5 [(buf.validate.field).repeated.items.enum = {
    defined_only: true,
    in: [
      1,
      2,
      5
    ]
  }];
  // Only return Labels with a name that contains this string using a case-insensitive comparison.
  string name_query = 6 [(buf.validate.field).string.max_len = 250];
  // The archive filter on the returned Labels.
  //
  // If not specified, defaults to ARCHIVE_FILTER_UNARCHIVED_ONLY.
  ArchiveFilter archive_filter = 7 [(buf.validate.field).enum.defined_only = true];
}

message ListLabelsResponse {
  // The next page token.
  //
  // If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The listed Labels.
  repeated Label labels = 2;
}

message ListLabelHistoryRequest {
  // The list order.
  enum Order {
    ORDER_UNSPECIFIED = 0;
    // Order by association time newest to oldest.
    //
    // The Commits most recently associated with the Label will be listed first.
    ORDER_DESC = 1;
    // Order by association time oldest to newest.
    ORDER_ASC = 2;
  }
  // The maximum number of items to return.
  //
  // The default value is 10.
  uint32 page_size = 1 [(buf.validate.field).uint32.lte = 250];
  // The page to start from.
  //
  // If empty, the first page is returned.
  string page_token = 2 [(buf.validate.field).string.max_len = 4096];
  // The Label to list history for.
  //
  // This may reference archived Labels.
  LabelRef label_ref = 3 [(buf.validate.field).required = true];
  // The order to list the Labels.
  //
  // If not specified, defaults to ORDER_DESC.
  Order order = 4 [(buf.validate.field).enum.defined_only = true];
  // The DigestType to use for Digests returned on Commits.
  //
  // If this DigestType is not available, an error is returned.
  // Note that certain DigestTypes may be deprecated over time.
  //
  // If not set, the latest DigestType is used, currently B5.
  DigestType digest_type = 5 [(buf.validate.field).enum.defined_only = true];
  // Only return Commits that have one of these CommitCheckStatus values for this label.
  //
  // If not set, Commits with any CommitCheckStatus value are returned.
  repeated CommitCheckStatus commit_check_statuses = 6 [(buf.validate.field).repeated.items.enum.defined_only = true];
  // The Commit id to start from.
  //
  // It is an error to provide a Commit id that doesn't exist on the Label.
  string start_commit_id = 7 [
    (buf.validate.field).string.tuuid = true,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  // Only list Commits where the Digest has changed from the previous Commit in the
  // history of this Label.
  bool only_commits_with_changed_digests = 8;
}

message ListLabelHistoryResponse {
  message Value {
    // The Commit.
    Commit commit = 1 [(buf.validate.field).required = true];
    // The CommitCheckState for this Commit on this Label.
    CommitCheckState commit_check_state = 2 [(buf.validate.field).required = true];
  }
  // The next page token.
  //
  // If empty, there are no more pages.
  string next_page_token = 1 [(buf.validate.field).string.max_len = 4096];
  // The ordered history of the Label.
  repeated Value values = 2;
}

message CreateOrUpdateLabelsRequest {
  // An individual request to create or update a Label.
  message Value {
    // The Labels to create or update.
    LabelRef label_ref = 1 [(buf.validate.field).required = true];
    // The id of the Commit to associate with the Label.
    //
    // If the Label already existed, the Label will now point to this Commit, as long as this Commit
    // is newer than the Commit that the Label is currently pointing to, otherwise an error is
    // returned.
    // If the Label was archived, it will be unarchived.
    string commit_id = 2 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.tuuid = true
    ];
  }
  // The Labels to create.
  repeated Value values = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message CreateOrUpdateLabelsResponse {
  // The created or updated Labels in the same order as given on the request.
  repeated Label labels = 1 [(buf.validate.field).repeated.min_items = 1];
}

message ArchiveLabelsRequest {
  // The Labels to archive.
  repeated LabelRef label_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message ArchiveLabelsResponse {}

message UnarchiveLabelsRequest {
  // The Labels to unarchive.
  repeated LabelRef label_refs = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 250
  ];
}

message UnarchiveLabelsResponse {}
