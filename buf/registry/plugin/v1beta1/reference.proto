// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.registry.plugin.v1beta1;

import "buf/validate/validate.proto";

option go_package = "buf.build/gen/go/bufbuild/registry/protocolbuffers/go/buf/registry/plugin/v1beta1";

// Reference to a piece of content.
//
// TODO(mf): not overly happy with the name as the term "Reference" is overloaded. maybe:
// ContentReference, ArtifactDigest, ContentIdentifier, Identifier, ??
message Reference {
  // The type of the Reference.
  ReferenceType type = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];
  // The value of the Reference.
  bytes value = 2 [(buf.validate.field).required = true];
}

// The type of a Reference.
enum ReferenceType {
  REFERENCE_TYPE_UNSPECIFIED = 0;
  // The SHA256 digest of the content.
  REFERENCE_TYPE_SHA256 = 1;
}

// The compression type of the content.
//
// TODO(mf): is there a better place for this?
enum CompressionType {
  COMPRESSION_TYPE_UNSPECIFIED = 0;
  // No compression.
  COMPRESSION_TYPE_NONE = 1;
  // Zstandard compression.
  COMPRESSION_TYPE_ZSTD = 2;
}
